{"version":3,"file":"metagrid-widget.cjs.js","sources":["../src/metagrid-api.ts","../src/metagrid-widget.ts"],"sourcesContent":["/**\n * Possible metagrid entities\n */\nexport enum MetagridEntities {\n  person = 'person',\n}\n\n/**\n * Supported metagrid languages\n */\nexport enum MetagridLanguages {\n  de = 'de',\n  fr = 'fr',\n  en = 'en',\n  it = 'it',\n  nl = 'nl',\n}\n\n/**\n * Metagrid status will return the state of the response\n * possible status-codes: all http status codes and 0. 0 stands for a general network issue\n * */\nexport interface MetagridStatus {\n  found: boolean\n  statusCode: number\n  error?: string\n}\n\n/**\n * The final struct of a fetch call with the status and the data\n */\nexport interface MetagridData {\n  status: MetagridStatus\n  data: MetagridLinks | []\n}\n\n/**\n * All possible values for a single link of metagrid\n */\nexport interface MetagridLink {\n  provider: string\n  url: string\n  shortDescription?: string\n  longDescription?: string\n}\n\n/**\n * An array of Metagrid links\n */\ninterface MetagridLinks extends Array<MetagridLink> {}\n\n/**\n * A single item detail from the metagrid api\n */\ninterface metagridResponseItmDetail {\n  url: string\n  short_description: string\n  long_description: string\n}\n\n/**\n * A single item from the metagrid api\n */\ntype metagridResponseItem = Record<string, metagridResponseItmDetail | string>\n\n/**\n * The metagrid api response\n */\ninterface metagridResponse extends Array<metagridResponseItem> {}\n\n/**\n * MetagridApi class to fetch data from the metagrid server\n */\nexport class MetagridApi {\n  /**\n     * Slug of a project\n     * You can find all the slugs over https://api.metagrid.ch/providers.json?size=40\n     * f.e. https://dodis.ch/P5 -> projectSlug: dodis\n     * @private\n     */\n  private readonly projectSlug: string\n\n  /**\n     * The entity to query\n     * @private\n     */\n  private readonly entity: MetagridEntities = MetagridEntities.person\n\n  /**\n     * Metagrid api url\n     * @private\n     */\n  private readonly apiUrl: string = 'https://api.metagrid.ch'\n\n  constructor (projectSlug: string, entity: MetagridEntities, apiUrl?: string) {\n    this.projectSlug = projectSlug\n    this.entity = entity\n    if (typeof apiUrl !== 'undefined') {\n      this.apiUrl = apiUrl\n    }\n  }\n\n  /**\n     * Fetch a metagrid identifier\n     * @param identifier\n     * @param langauge\n     * @param includeDescription\n     * @throws error if the fetch process fails\n     */\n  public async fetch (identifier: string, langauge: MetagridLanguages = MetagridLanguages.de, includeDescription: boolean = false): Promise<MetagridData> {\n    const queryParams: string[] = []\n    queryParams.push(`include=${String(includeDescription)}`)\n    queryParams.push(`language=${langauge}`)\n    try {\n      const resp = await fetch(`${this.apiUrl}/widget/${this.projectSlug}/${this.entity}/${identifier}.json?${queryParams.join('&')}`)\n      // 4xx or 5xx error in the api\n      if (!resp.ok) {\n        return this.buildResponse(resp)\n      }\n      // return successfully\n      return this.buildResponse(resp, this.transform(await resp.json()))\n    } catch (error) {\n      // return a general network error\n      return this.buildResponse({\n        statusCode: 0,\n        found: false,\n        error: 'unknown network error'\n      })\n    }\n  }\n\n  /**\n     * Build the MetagridData object for a given response or status\n     * @param status\n     * @private\n     */\n  private buildResponse (status: MetagridStatus): MetagridData\n  private buildResponse (resp: Response): MetagridData\n  private buildResponse (resp: Response, data: MetagridLinks | []): MetagridData\n  private buildResponse (resp: any, data: MetagridLinks | [] = []): MetagridData {\n    if ('ok' in resp) {\n      return {\n        status: {\n          statusCode: resp.status,\n          found: resp.status === 200,\n          error: resp.statusText\n        },\n        data\n      }\n    } else {\n      return {\n        status: resp as MetagridStatus,\n        data: []\n      }\n    }\n  }\n\n  /**\n     * Map the response from metagrid to an array of objects\n     * @param data\n     * @private\n     */\n  private transform (data: metagridResponse): MetagridLinks {\n    return Object.keys(data[0]).map((key) => {\n      const item: metagridResponseItmDetail | string = data[0][key]\n      if (typeof item === 'string') {\n        return {\n          provider: key,\n          url: item\n        }\n      }\n      const result: MetagridLink = {\n        provider: key,\n        url: item.url,\n        shortDescription: item.short_description,\n        longDescription: item.long_description\n      }\n      return result;\n    })\n  }\n\n  /**\n     * Fabric to create a new MetagridApi instance\n     * @param projectSlug\n     * @param entity\n     */\n  public static create (projectSlug: string, entity: string = 'person'): MetagridApi {\n    return new MetagridApi(projectSlug, entity as MetagridEntities)\n  }\n}\n","import { MetagridApi, MetagridData, MetagridLanguages } from './metagrid-api.js'\n\n/**\n   * Widget renders the metagrid links into a given html element\n   * @param mountTo\n   * @param projectSlug\n   * @param identifier\n   * @param language\n   * @param includeDescription\n   */\nexport async function widget (mountTo: HTMLElement, projectSlug: string, identifier: string, language: string = 'de', includeDescription = false): Promise<void> {\n  const api: MetagridApi = MetagridApi.create(projectSlug)\n  const data: MetagridData = await api.fetch(identifier, language as MetagridLanguages, includeDescription)\n  if (data.status.found) {\n    // build up link list\n    const ul = document.createElement('ul')\n    ul.classList.add('metagrid-list')\n    data.data.forEach((d) => {\n      const link = d\n      const li = document.createElement('li')\n      li.classList.add('metagrid-item')\n      const a = document.createElement('a')\n      a.classList.add('metagrid-link')\n      a.href = link.url\n      a.innerText = link.provider\n      a.target = '_blank'\n      // check if we can set a title\n      if (typeof link.longDescription !== 'undefined') {\n        a.title = link.longDescription\n      }\n      li.append(a)\n      ul.append(li)\n    })\n    mountTo.append(ul)\n    mountTo.append(credit(language as MetagridLanguages))\n  } else {\n    console.info(`Metagrid didn't find a concordance. Statuscode: ${data.status.statusCode}, error: ${data.status.error as string}`)\n  }\n}\n\n/**\n   * Create credit div for metagrid\n   * @param language\n   */\nexport function credit (language?: MetagridLanguages): HTMLElement {\n  const div = document.createElement('div')\n  div.classList.add('metagrid-credit')\n  let sahsText: string = 'the networking initiative of the SAHS'\n  switch (language) {\n    case MetagridLanguages.de:\n      sahsText = 'die Vernetzungsinitiative der SAGW'\n      break\n    case MetagridLanguages.fr:\n      sahsText = 'l’initiative de mise en réseau de l’ASSH'\n      break\n    case MetagridLanguages.it:\n      sahsText = 'l’iniziativa di messa in rete dell’ASSU'\n      break\n  }\n  div.innerHTML = `Links powered by <a href=\"https://www.metagrid.ch\" target=\"_blank\">Metagrid</a> – ${sahsText}`\n  return div\n}\n"],"names":["MetagridLanguages","MetagridApi","projectSlug","entity","apiUrl","__publicField","identifier","langauge","includeDescription","__async","queryParams","resp","error","data","key","item","widget","mountTo","language","ul","d","link","li","a","credit","div","sahsText"],"mappings":"ieAUY,IAAAA,GAAAA,IACVA,EAAA,GAAK,KACLA,EAAA,GAAK,KACLA,EAAA,GAAK,KACLA,EAAA,GAAK,KACLA,EAAA,GAAK,KALKA,IAAAA,GAAA,CAAA,CAAA,EA+DL,MAAMC,CAAY,CAqBvB,YAAaC,EAAqBC,EAA0BC,EAAiB,CAd5DC,EAAA,oBAMAA,EAAA,cAA2B,UAM3BA,EAAA,cAAiB,2BAGhC,KAAK,YAAcH,EACnB,KAAK,OAASC,EACV,OAAOC,GAAW,cACpB,KAAK,OAASA,EAElB,CASa,MAAOE,EAAoBC,EAA8B,KAAsBC,EAA8B,GAA8B,QAAAC,EAAA,sBACtJ,MAAMC,EAAwB,CAAA,EAC9BA,EAAY,KAAK,WAAW,OAAOF,CAAkB,GAAG,EAC5CE,EAAA,KAAK,YAAYH,GAAU,EACnC,GAAA,CACF,MAAMI,EAAO,MAAM,MAAM,GAAG,KAAK,iBAAiB,KAAK,eAAe,KAAK,UAAUL,UAAmBI,EAAY,KAAK,GAAG,GAAG,EAE3H,OAACC,EAAK,GAIH,KAAK,cAAcA,EAAM,KAAK,UAAU,MAAMA,EAAK,KAAM,CAAA,CAAC,EAHxD,KAAK,cAAcA,CAAI,QAIzBC,GAEP,OAAO,KAAK,cAAc,CACxB,WAAY,EACZ,MAAO,GACP,MAAO,uBAAA,CACR,CACH,CACF,GAUQ,cAAeD,EAAWE,EAA2B,GAAkB,CAC7E,MAAI,OAAQF,EACH,CACL,OAAQ,CACN,WAAYA,EAAK,OACjB,MAAOA,EAAK,SAAW,IACvB,MAAOA,EAAK,UACd,EACA,KAAAE,CAAA,EAGK,CACL,OAAQF,EACR,KAAM,CAAC,CAAA,CAGb,CAOQ,UAAWE,EAAuC,CACxD,OAAO,OAAO,KAAKA,EAAK,EAAE,EAAE,IAAKC,GAAQ,CACjC,MAAAC,EAA2CF,EAAK,GAAGC,GACrD,OAAA,OAAOC,GAAS,SACX,CACL,SAAUD,EACV,IAAKC,CAAA,EAGoB,CAC3B,SAAUD,EACV,IAAKC,EAAK,IACV,iBAAkBA,EAAK,kBACvB,gBAAiBA,EAAK,gBAAA,CAEjB,CACR,CACH,CAOA,OAAc,OAAQb,EAAqBC,EAAiB,SAAuB,CAC1E,OAAA,IAAIF,EAAYC,EAAaC,CAA0B,CAChE,CACF,CCnLA,SAAsBa,EAAQC,EAAsBf,EAAqBI,EAAoBY,EAAmB,KAAMV,EAAqB,GAAsB,QAAAC,EAAA,sBAE/J,MAAMI,EAAqB,MADFZ,EAAY,OAAOC,CAAW,EAClB,MAAMI,EAAYY,EAA+BV,CAAkB,EACpG,GAAAK,EAAK,OAAO,MAAO,CAEf,MAAAM,EAAK,SAAS,cAAc,IAAI,EACnCA,EAAA,UAAU,IAAI,eAAe,EAC3BN,EAAA,KAAK,QAASO,GAAM,CACvB,MAAMC,EAAOD,EACPE,EAAK,SAAS,cAAc,IAAI,EACnCA,EAAA,UAAU,IAAI,eAAe,EAC1B,MAAAC,EAAI,SAAS,cAAc,GAAG,EAClCA,EAAA,UAAU,IAAI,eAAe,EAC/BA,EAAE,KAAOF,EAAK,IACdE,EAAE,UAAYF,EAAK,SACnBE,EAAE,OAAS,SAEP,OAAOF,EAAK,iBAAoB,cAClCE,EAAE,MAAQF,EAAK,iBAEjBC,EAAG,OAAOC,CAAC,EACXJ,EAAG,OAAOG,CAAE,CAAA,CACb,EACDL,EAAQ,OAAOE,CAAE,EACTF,EAAA,OAAOO,EAAON,CAA6B,CAAC,CAAA,MAEpD,QAAQ,KAAK,mDAAmDL,EAAK,OAAO,sBAAsBA,EAAK,OAAO,OAAiB,CAEnI,GAMO,SAASW,EAAQN,EAA2C,CAC3D,MAAAO,EAAM,SAAS,cAAc,KAAK,EACpCA,EAAA,UAAU,IAAI,iBAAiB,EACnC,IAAIC,EAAmB,wCACvB,OAAQR,EAAU,CAChB,KAAKlB,EAAkB,GACV0B,EAAA,qCACX,MACF,KAAK1B,EAAkB,GACV0B,EAAA,wDACX,MACF,KAAK1B,EAAkB,GACV0B,EAAA,oDACX,KACJ,CACA,OAAAD,EAAI,UAAY,0FAAqFC,IAC9FD,CACT"}